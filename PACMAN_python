from queue import PriorityQueue

def nextMove(r, c, pacman_r, pacman_c, food_r, food_c, grid):
    # Define the possible moves (UP, DOWN, LEFT, RIGHT)
    moves = [(0, -1), (0, 1), (-1, 0), (1, 0)]
    
    # Initialize the priority queue for UCS
    pq = PriorityQueue()
    pq.put((0, pacman_r, pacman_c, []))  # Priority, row, column, path
    
    visited = set()
    
    while not pq.empty():
        cost, row, col, path = pq.get()
        
        # If the current cell is the food cell, we are done
        if row == food_r and col == food_c:
            print(len(path))
            print("\n".join(path))
            return
        
        # Check and add neighbors to the priority queue
        for dr, dc in moves:
            new_row, new_col = row + dr, col + dc
            
            # Check if the neighbor is valid and not a wall
            if 0 <= new_row < r and 0 <= new_col < c and grid[new_row][new_col] != '%':
                new_cost = cost + 1  # Cost to move to a neighboring cell
                
                # Check if we haven't visited this cell yet
                if (new_row, new_col) not in visited:
                    visited.add((new_row, new_col))
                    new_path = path + [(new_row, new_col)]
                    pq.put((new_cost, new_row, new_col, new_path))

# Example usage:
if __name__ == "__main__":
    pacman_r, pacman_c = map(int, input().strip().split())
    food_r, food_c = map(int, input().strip().split())
    r, c = map(int, input().strip().split())
    grid = [list(input().strip()) for _ in range(r)]
    
    nextMove(r, c, pacman_r, pacman_c, food_r, food_c, grid)
